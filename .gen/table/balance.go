//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Balance = newBalanceTable("", "balance", "")

type balanceTable struct {
	sqlite.Table

	//Columns
	Timestamp   sqlite.ColumnString
	AccountID   sqlite.ColumnInteger
	Value       sqlite.ColumnString
	Delta       sqlite.ColumnString
	Comment     sqlite.ColumnString
	IsComputed  sqlite.ColumnInteger
	OperationID sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type BalanceTable struct {
	balanceTable

	EXCLUDED balanceTable
}

// AS creates new BalanceTable with assigned alias
func (a BalanceTable) AS(alias string) *BalanceTable {
	return newBalanceTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new BalanceTable with assigned schema name
func (a BalanceTable) FromSchema(schemaName string) *BalanceTable {
	return newBalanceTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new BalanceTable with assigned table prefix
func (a BalanceTable) WithPrefix(prefix string) *BalanceTable {
	return newBalanceTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new BalanceTable with assigned table suffix
func (a BalanceTable) WithSuffix(suffix string) *BalanceTable {
	return newBalanceTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newBalanceTable(schemaName, tableName, alias string) *BalanceTable {
	return &BalanceTable{
		balanceTable: newBalanceTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newBalanceTableImpl("", "excluded", ""),
	}
}

func newBalanceTableImpl(schemaName, tableName, alias string) balanceTable {
	var (
		TimestampColumn   = sqlite.StringColumn("timestamp")
		AccountIDColumn   = sqlite.IntegerColumn("account_id")
		ValueColumn       = sqlite.StringColumn("value")
		DeltaColumn       = sqlite.StringColumn("delta")
		CommentColumn     = sqlite.StringColumn("comment")
		IsComputedColumn  = sqlite.IntegerColumn("is_computed")
		OperationIDColumn = sqlite.IntegerColumn("operation_id")
		allColumns        = sqlite.ColumnList{TimestampColumn, AccountIDColumn, ValueColumn, DeltaColumn, CommentColumn, IsComputedColumn, OperationIDColumn}
		mutableColumns    = sqlite.ColumnList{ValueColumn, DeltaColumn, CommentColumn, IsComputedColumn, OperationIDColumn}
	)

	return balanceTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Timestamp:   TimestampColumn,
		AccountID:   AccountIDColumn,
		Value:       ValueColumn,
		Delta:       DeltaColumn,
		Comment:     CommentColumn,
		IsComputed:  IsComputedColumn,
		OperationID: OperationIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
