//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Info = newInfoTable("", "info", "")

type infoTable struct {
	sqlite.Table

	//Columns
	SchemaVersion sqlite.ColumnString

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type InfoTable struct {
	infoTable

	EXCLUDED infoTable
}

// AS creates new InfoTable with assigned alias
func (a InfoTable) AS(alias string) *InfoTable {
	return newInfoTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new InfoTable with assigned schema name
func (a InfoTable) FromSchema(schemaName string) *InfoTable {
	return newInfoTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new InfoTable with assigned table prefix
func (a InfoTable) WithPrefix(prefix string) *InfoTable {
	return newInfoTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new InfoTable with assigned table suffix
func (a InfoTable) WithSuffix(suffix string) *InfoTable {
	return newInfoTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newInfoTable(schemaName, tableName, alias string) *InfoTable {
	return &InfoTable{
		infoTable: newInfoTableImpl(schemaName, tableName, alias),
		EXCLUDED:  newInfoTableImpl("", "excluded", ""),
	}
}

func newInfoTableImpl(schemaName, tableName, alias string) infoTable {
	var (
		SchemaVersionColumn = sqlite.StringColumn("schema_version")
		allColumns          = sqlite.ColumnList{SchemaVersionColumn}
		mutableColumns      = sqlite.ColumnList{SchemaVersionColumn}
	)

	return infoTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		SchemaVersion: SchemaVersionColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
