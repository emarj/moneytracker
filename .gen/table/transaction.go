//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Transaction = newTransactionTable("", "transaction", "")

type transactionTable struct {
	sqlite.Table

	//Columns
	ID          sqlite.ColumnInteger
	Timestamp   sqlite.ColumnString
	FromID      sqlite.ColumnInteger
	ToID        sqlite.ColumnInteger
	Amount      sqlite.ColumnString
	OperationID sqlite.ColumnInteger
	IsConfirmed sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type TransactionTable struct {
	transactionTable

	EXCLUDED transactionTable
}

// AS creates new TransactionTable with assigned alias
func (a TransactionTable) AS(alias string) *TransactionTable {
	return newTransactionTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new TransactionTable with assigned schema name
func (a TransactionTable) FromSchema(schemaName string) *TransactionTable {
	return newTransactionTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new TransactionTable with assigned table prefix
func (a TransactionTable) WithPrefix(prefix string) *TransactionTable {
	return newTransactionTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new TransactionTable with assigned table suffix
func (a TransactionTable) WithSuffix(suffix string) *TransactionTable {
	return newTransactionTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newTransactionTable(schemaName, tableName, alias string) *TransactionTable {
	return &TransactionTable{
		transactionTable: newTransactionTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newTransactionTableImpl("", "excluded", ""),
	}
}

func newTransactionTableImpl(schemaName, tableName, alias string) transactionTable {
	var (
		IDColumn          = sqlite.IntegerColumn("id")
		TimestampColumn   = sqlite.StringColumn("timestamp")
		FromIDColumn      = sqlite.IntegerColumn("from_id")
		ToIDColumn        = sqlite.IntegerColumn("to_id")
		AmountColumn      = sqlite.StringColumn("amount")
		OperationIDColumn = sqlite.IntegerColumn("operation_id")
		IsConfirmedColumn = sqlite.IntegerColumn("is_confirmed")
		allColumns        = sqlite.ColumnList{IDColumn, TimestampColumn, FromIDColumn, ToIDColumn, AmountColumn, OperationIDColumn, IsConfirmedColumn}
		mutableColumns    = sqlite.ColumnList{TimestampColumn, FromIDColumn, ToIDColumn, AmountColumn, OperationIDColumn, IsConfirmedColumn}
	)

	return transactionTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Timestamp:   TimestampColumn,
		FromID:      FromIDColumn,
		ToID:        ToIDColumn,
		Amount:      AmountColumn,
		OperationID: OperationIDColumn,
		IsConfirmed: IsConfirmedColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
