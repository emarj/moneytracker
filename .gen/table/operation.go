//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Operation = newOperationTable("", "operation", "")

type operationTable struct {
	sqlite.Table

	//Columns
	ID          sqlite.ColumnInteger
	CreatedOn   sqlite.ColumnString
	ModifiedOn  sqlite.ColumnString
	CreatedByID sqlite.ColumnInteger
	Description sqlite.ColumnString
	TypeID      sqlite.ColumnInteger
	Details     sqlite.ColumnString
	CategoryID  sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type OperationTable struct {
	operationTable

	EXCLUDED operationTable
}

// AS creates new OperationTable with assigned alias
func (a OperationTable) AS(alias string) *OperationTable {
	return newOperationTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new OperationTable with assigned schema name
func (a OperationTable) FromSchema(schemaName string) *OperationTable {
	return newOperationTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new OperationTable with assigned table prefix
func (a OperationTable) WithPrefix(prefix string) *OperationTable {
	return newOperationTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new OperationTable with assigned table suffix
func (a OperationTable) WithSuffix(suffix string) *OperationTable {
	return newOperationTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newOperationTable(schemaName, tableName, alias string) *OperationTable {
	return &OperationTable{
		operationTable: newOperationTableImpl(schemaName, tableName, alias),
		EXCLUDED:       newOperationTableImpl("", "excluded", ""),
	}
}

func newOperationTableImpl(schemaName, tableName, alias string) operationTable {
	var (
		IDColumn          = sqlite.IntegerColumn("id")
		CreatedOnColumn   = sqlite.StringColumn("created_on")
		ModifiedOnColumn  = sqlite.StringColumn("modified_on")
		CreatedByIDColumn = sqlite.IntegerColumn("created_by_id")
		DescriptionColumn = sqlite.StringColumn("description")
		TypeIDColumn      = sqlite.IntegerColumn("type_id")
		DetailsColumn     = sqlite.StringColumn("details")
		CategoryIDColumn  = sqlite.IntegerColumn("category_id")
		allColumns        = sqlite.ColumnList{IDColumn, CreatedOnColumn, ModifiedOnColumn, CreatedByIDColumn, DescriptionColumn, TypeIDColumn, DetailsColumn, CategoryIDColumn}
		mutableColumns    = sqlite.ColumnList{CreatedOnColumn, ModifiedOnColumn, CreatedByIDColumn, DescriptionColumn, TypeIDColumn, DetailsColumn, CategoryIDColumn}
	)

	return operationTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		CreatedOn:   CreatedOnColumn,
		ModifiedOn:  ModifiedOnColumn,
		CreatedByID: CreatedByIDColumn,
		Description: DescriptionColumn,
		TypeID:      TypeIDColumn,
		Details:     DetailsColumn,
		CategoryID:  CategoryIDColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
