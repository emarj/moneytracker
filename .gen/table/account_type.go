//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var AccountType = newAccountTypeTable("", "account_type", "")

type accountTypeTable struct {
	sqlite.Table

	//Columns
	ID     sqlite.ColumnInteger
	Name   sqlite.ColumnString
	System sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type AccountTypeTable struct {
	accountTypeTable

	EXCLUDED accountTypeTable
}

// AS creates new AccountTypeTable with assigned alias
func (a AccountTypeTable) AS(alias string) *AccountTypeTable {
	return newAccountTypeTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AccountTypeTable with assigned schema name
func (a AccountTypeTable) FromSchema(schemaName string) *AccountTypeTable {
	return newAccountTypeTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AccountTypeTable with assigned table prefix
func (a AccountTypeTable) WithPrefix(prefix string) *AccountTypeTable {
	return newAccountTypeTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AccountTypeTable with assigned table suffix
func (a AccountTypeTable) WithSuffix(suffix string) *AccountTypeTable {
	return newAccountTypeTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAccountTypeTable(schemaName, tableName, alias string) *AccountTypeTable {
	return &AccountTypeTable{
		accountTypeTable: newAccountTypeTableImpl(schemaName, tableName, alias),
		EXCLUDED:         newAccountTypeTableImpl("", "excluded", ""),
	}
}

func newAccountTypeTableImpl(schemaName, tableName, alias string) accountTypeTable {
	var (
		IDColumn       = sqlite.IntegerColumn("id")
		NameColumn     = sqlite.StringColumn("name")
		SystemColumn   = sqlite.IntegerColumn("system")
		allColumns     = sqlite.ColumnList{IDColumn, NameColumn, SystemColumn}
		mutableColumns = sqlite.ColumnList{NameColumn, SystemColumn}
	)

	return accountTypeTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:     IDColumn,
		Name:   NameColumn,
		System: SystemColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
