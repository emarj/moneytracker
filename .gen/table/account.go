//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package table

import (
	"github.com/go-jet/jet/v2/sqlite"
)

var Account = newAccountTable("", "account", "")

type accountTable struct {
	sqlite.Table

	//Columns
	ID          sqlite.ColumnInteger
	Created     sqlite.ColumnString
	Name        sqlite.ColumnString
	DisplayName sqlite.ColumnString
	OwnerID     sqlite.ColumnInteger
	IsSystem    sqlite.ColumnInteger
	IsWorld     sqlite.ColumnInteger
	IsCredit    sqlite.ColumnInteger

	AllColumns     sqlite.ColumnList
	MutableColumns sqlite.ColumnList
}

type AccountTable struct {
	accountTable

	EXCLUDED accountTable
}

// AS creates new AccountTable with assigned alias
func (a AccountTable) AS(alias string) *AccountTable {
	return newAccountTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new AccountTable with assigned schema name
func (a AccountTable) FromSchema(schemaName string) *AccountTable {
	return newAccountTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new AccountTable with assigned table prefix
func (a AccountTable) WithPrefix(prefix string) *AccountTable {
	return newAccountTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new AccountTable with assigned table suffix
func (a AccountTable) WithSuffix(suffix string) *AccountTable {
	return newAccountTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newAccountTable(schemaName, tableName, alias string) *AccountTable {
	return &AccountTable{
		accountTable: newAccountTableImpl(schemaName, tableName, alias),
		EXCLUDED:     newAccountTableImpl("", "excluded", ""),
	}
}

func newAccountTableImpl(schemaName, tableName, alias string) accountTable {
	var (
		IDColumn          = sqlite.IntegerColumn("id")
		CreatedColumn     = sqlite.StringColumn("created")
		NameColumn        = sqlite.StringColumn("name")
		DisplayNameColumn = sqlite.StringColumn("display_name")
		OwnerIDColumn     = sqlite.IntegerColumn("owner_id")
		IsSystemColumn    = sqlite.IntegerColumn("is_system")
		IsWorldColumn     = sqlite.IntegerColumn("is_world")
		IsCreditColumn    = sqlite.IntegerColumn("is_credit")
		allColumns        = sqlite.ColumnList{IDColumn, CreatedColumn, NameColumn, DisplayNameColumn, OwnerIDColumn, IsSystemColumn, IsWorldColumn, IsCreditColumn}
		mutableColumns    = sqlite.ColumnList{CreatedColumn, NameColumn, DisplayNameColumn, OwnerIDColumn, IsSystemColumn, IsWorldColumn, IsCreditColumn}
	)

	return accountTable{
		Table: sqlite.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:          IDColumn,
		Created:     CreatedColumn,
		Name:        NameColumn,
		DisplayName: DisplayNameColumn,
		OwnerID:     OwnerIDColumn,
		IsSystem:    IsSystemColumn,
		IsWorld:     IsWorldColumn,
		IsCredit:    IsCreditColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
